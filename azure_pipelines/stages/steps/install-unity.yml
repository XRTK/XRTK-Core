steps:
  - powershell: |
      Write-Host "Unity Installation Validation"
      $editorRootPath = ""
      $editorFileEx = ""
      $version = Get-Content -Path "$(System.DefaultWorkingDirectory)\$(project.name)\ProjectSettings\ProjectVersion.txt"
      $pattern = '(?<version>(?:(?<major>\d+)\.)?(?:(?<minor>\d+)\.)?(?:(?<patch>\d+[fab]\d+)\b))|((?:\((?<revision>\w+))\))'
      $matches = $matches = [regex]::Matches($version, $pattern)
      $unityVersion = $matches[1].Groups['version'].Value.Trim()
      $unityVersionChangeSet = $matches[2].Groups['revision'].Value.Trim()

      if ( (-not $global:PSVersionTable.Platform) -or ($global:PSVersionTable.Platform -eq "Win32NT") ) {
        $hubPath = "C:\Program Files\Unity Hub\Unity Hub.exe"
        $editorRootPath = "C:\Program Files\Unity\Hub\Editor\"
        $editorFileEx = "Editor\Unity.exe"
      }
      elseif ( $global:PSVersionTable.OS.Contains("Darwin") ) {
        $hubPath = "/Applications/Unity Hub.app/Contents/MacOS/Unity Hub"
        $editorRootPath = "/Applications/Unity/Hub/Editor/"
        $editorFileEx = "Unity.app"
      }
      elseif ( $global:PSVersionTable.OS.Contains("Linux") ) {
        $hubPath = "./UnityHub.AppImage"
        $editorRootPath = "~/Unity/Hub/Editor/"
        $editorFileEx = "Unity"
      }

      if ( Test-Path -Path "$hubPath" ) {
        Write-Host "Unity Hub found at "$hubPath""
        Write-Host ""
      } else {
        Write-Error "Failed to validate Unity Hub path at "$hubPath""
        exit 1
      }

      Write-Host "Unity HUB CLI Options:"
      Start-Process -Verbose -NoNewWindow -PassThru -Wait -FilePath "$hubPath" -ArgumentList @('--','--headless','help')
      Write-Host ""

      $editorPath = '{0}{1}{2}{3}' -f $editorRootPath,$unityVersion,[IO.Path]::DirectorySeparatorChar,$editorFileEx

      if ( -not (Test-Path -Path "$editorPath") ){
        Write-Host "Installing $unityVersion ($unityVersionChangeSet) ..."
        $installArgs = @('--','--headless','install',"--version $unityVersion","--changeset $unityVersionChangeSet", '--cm');

        foreach ( $module in ${{ parameters.modules }} ) {
          $installArgs += '-m'
          $installArgs += $module
        }

        Start-Process -Verbose -NoNewWindow -PassThru -Wait -FilePath "$hubPath" -ArgumentList $installArgs
        Write-Host ""
        Write-Host "Install Complete!"
        Write-Host ""
      }

      Write-Host "Getting installed editors..."
      Start-Process -Verbose -NoNewWindow -PassThru -Wait -FilePath "$hubPath" -ArgumentList @('--','--headless','editors','-i')
      Write-Host ""

      if ( -not (Test-Path -Path "$editorPath") ) {
        Write-Error "Failed to validate installed editor path at "$editorPath""
        exit 1
      }

      Write-Host "Unity Editor path: $editorPath"
      echo "##vso[task.setvariable variable=EditorPath]$editorPath"
      exit 0
    failOnStderr: true
    displayName: 'Install Unity Editor'

  - powershell: |
      $logDirectory = '$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs'
      New-Item -ItemType Directory -Force -Path $logDirectory
      echo "##vso[task.setvariable variable=LogDirectory]$logDirectory"

      Write-Host "Activating License..."

      $logPath = "$logDirectory\activation.log"
      $process = Start-Process -FilePath "$(EditorPath)" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -serial $(UnitySerial) -username `"$(UnityUsername)`" -password `"$(UnityPassword)`" -logfile `"$logPath`"" -PassThru

      $ljob = Start-Job -ScriptBlock {
        param($log)

        while ( -not (Test-Path $log -Type Leaf) ) {
            Start-Sleep -Seconds 1
        }

        Get-Content "$log" -Wait
      } -ArgumentList $logPath

      while ( -not $process.HasExited )
      {
        # While waiting, Get-Content checks the file once each second
        Start-Sleep -Seconds 1
        Receive-Job $ljob
      }

      # Wait for the last of the log information to be written
      Start-Sleep -Seconds 10
      Receive-Job $ljob
      Stop-Job $ljob
      Remove-Job $ljob

      exit $process.ExitCode
    failOnStderr: true
    displayName: 'Activate Unity License'
