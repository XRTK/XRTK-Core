steps:
  - powershell: |
      Install-Module -Name UnitySetup -AllowPrerelease -RequiredVersion $(UnityPowerShellHelperVersion) -Scope CurrentUser -Repository PSGallery -Force
      Install-UnitySetupInstance -Verbose -Installers ( Find-UnitySetupInstaller -Version $(UnityVersion) -Components ${{ parameters.components }} -Verbose )
      Get-UnitySetupInstance | Select-UnitySetupInstance | Format-Table -Wrap -AutoSize
      $editorInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Version $(UnityVersion)
      $editorPath = $editorInstance.Path + "\Editor\Unity.exe"
      Write-Host "UnityEditor path set to: $editorPath"
      echo "##vso[task.setvariable variable=EditorPath]$editorPath"
    failOnStderr: true
    displayName: 'Install Unity Editor'

  - powershell: |
      $logDirectory = '$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs'
      New-Item -ItemType Directory -Force -Path $logDirectory
      echo "##vso[task.setvariable variable=LogDirectory]$logDirectory"

      Write-Host "Activating License..."

      $logPath = "$logDirectory\activation.log"
      $process = Start-Process -FilePath "$(EditorPath)" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -serial $(UnitySerial) -username `"$(UnityUsername)`" -password `"$(UnityPassword)`" -logfile `"$logPath`"" -PassThru

      $ljob = Start-Job -ScriptBlock {
        param($log)

        while ( (Test-Path $$log -Type Leaf) ) {
            Start-Sleep -Milliseconds 1000
        }

        Get-Content "$log" -Wait | Write-Host
      } -ArgumentList $logPath

      while ( -not $process.HasExited )
      {
        Start-Sleep -Milliseconds 1000
        Receive-Job $ljob
      }

      Start-Sleep -Milliseconds 5000
      Receive-Job $ljob
      Stop-Job $ljob
      Remove-Job $ljob

      exit $process.ExitCode
    failOnStderr: true
    displayName: 'Activate Unity License'
