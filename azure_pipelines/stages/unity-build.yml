stages:
- stage:
  displayName: 'Build'

  jobs:
    - job:
      displayName: ${{ format('{0}', parameters.image) }}
      timeoutInMinutes: 120
      variables:
      - group: Global Pipeline Settings
      pool:
        name: 'Azure Pipelines'
        vmImage: ${{ parameters.image }}
        demands:
          - unity -equals true

      steps:
      - checkout: self
        submodules: recursive

      - template: steps/upm-package-info.yml

      - powershell: |
          $buildNumber = '$(Build.BuildNumber)'
          $split = $buildNumber.Split('.')
          $revision = $split[$split.Count - 1]
          Write-Host "Build Repo Name: $(Build.Repository.Name)"
          Write-Host "Build Number: $buildNumber"
          Write-Host "Build Revision Number: $revision"
          Write-Host "Package Version: $(package.version)"
          Write-Host "isReleaseBuild? $(isReleaseBuild)"
          Write-Host "isPreviewBuild? $(isPreviewBuild)"
          $logDirectory = '$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs'
          New-Item -ItemType Directory -Force -Path $logDirectory
          echo "##vso[task.setvariable variable=LogDirectory]$logDirectory"
          Write-Host "Log Directory: `"$logDirectory`""
        displayName: 'Build Variables'
        condition: always()

      - template: steps/validate-unity-installation.yml
        parameters:
          modules: ${{ parameters.modules }}

      #- template: steps/validate-project.yml

      - ${{ each item in parameters.targets }}:
        - template: steps/run-unity-tests.yml
          parameters:
            target: ${{ item }}
        - template: steps/build-unity-player.yml
          parameters:
            target: ${{ item }}

      - ${{ if eq(parameters.image, 'windows-latest') }}:
        - template: steps/build-docs.yml
        - template: steps/export-package-seed.yml

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Pipeline Artifacts'
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)\$(project.name)\Builds'
          artifact: ${{ format('{0}.{1}.{2}', '$(Build.BuildNumber)', '$(Build.BuildId)', '$(System.JobAttempt)') }}
        condition: always()
        continueOnError: true
