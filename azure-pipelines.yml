variables:
  - group: Global Pipeline Settings
  - name: project.folder
    value: 'XRTK'
  - name: project.name
    value: 'XRTK-Core'
  - name: package.name
    value: 'com.xrtk.core'

name: XRTK.Core-$(Date:yyyyMMdd)$(Rev:.r)
# name: XRTK.Core$(System.PullRequest.PullRequestNumber)$(Rev:.r)

pr:
  autoCancel: true
  branches:
   include:
     - master
     - development
     - feature/*
  paths:
    include:
    - $(project.name)/*
    exclude:
      - '*'
      - $(project.name)/Packages/$(package.name)/README.md
      - $(project.name)/Packages/$(package.name)/LICENSE.md
      - $(project.name)/Packages/$(package.name)/.github/*

pool:
  name: Azure Pipelines
  vmImage: 'vs2017-win2016'
  demands:
    - unity -equals true

jobs:
  - job:
    steps:
    - checkout: self
      submodules: recursive

    - task: DownloadSecureFile@1
      displayName: 'Download Unity Credentials'
      inputs:
        secureFile: '47a1e34d-3344-416c-85c8-0d055ae43ddc'

    - powershell: 'Install-Module -Name UnitySetup -AllowPrerelease -RequiredVersion $(UnityPowerShellHelperVersion) -Scope CurrentUser -Repository PSGallery -Force'
      failOnStderr: true
      displayName: 'Install UnitySetup.Powershell module'

    - powershell: 'Install-UnitySetupInstance -Verbose -Installers ( Find-UnitySetupInstaller -Version $(UnityVersion) -Components  ''Windows'', ''Windows_IL2CPP'' -Verbose )'
      displayName: 'Install Unity Editor'

    - powershell: 'Get-UnitySetupInstance | Select-UnitySetupInstance | Format-Table -Wrap -AutoSize'
      displayName: 'List Unity installs'

    - powershell: |
        New-Item -Path $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\activation.log -ItemType File -Force

        $unityCredentials = (Get-Content "$(Agent.TempDirectory)\xrtk-build-credentials.json" -Raw) | ConvertFrom-Json

        if ( -not $unityCredentials ) {
            Write-Error "Failed to find unity credentials"
            exit 1
        }

        $username = $unityCredentials.username
        $password = $unityCredentials.password
        $serial = $unityCredentials.serial

        $editorInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Latest
        $editorPath = $editorInstance.Path + "\Editor\Unity.exe"
        Write-Host $editorInstance.Path
        Write-Host "Activating License..."
        $process = Start-Process -FilePath "$editorPath" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -serial $serial -username `"$username`" -password `"$password`" -logfile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\activation.log`"" -PassThru
        $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\activation.log

        while ( -not $process.HasExited -and $ljob.HasMoreData )
        {
            Receive-Job $ljob
            Start-Sleep -Milliseconds 500
        }

        Receive-Job $ljob
        Stop-Job $ljob
        Remove-Job $ljob

        exit $process.ExitCode
      displayName: 'Activate Unity License'

    - powershell: |
        Write-Host "Starting Unity Unit Tests..."
        $process = Start-Process -FilePath "$editorPath" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -runEditorTests -editorTestsResultFile .\tests.xml -logfile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\tests.log`"" -PassThru
        $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\tests.log

        while ( -not $process.HasExited -and $ljob.HasMoreData )
        {
            Receive-Job $ljob
            Start-Sleep -Milliseconds 500
        }

        Receive-Job $ljob
        Stop-Job $ljob
        Remove-Job $ljob

        exit $process.ExitCode
        # Start-UnityEditor -Latest -BatchMode -RunEditorTests -EditorTestsResultFile .\tests.xml -LogFile $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\tests.log -Wait
      displayName: 'Run Unity Unit Tests'
      timeoutInMinutes: 15

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: 'test?.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)\$(project.name)'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

    - powershell: |
        Write-Host "Starting Windows x64 Build..."
        $process = Start-Process -FilePath "$editorPath" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -buildTarget StandaloneWindows64 -executeMethod XRTK.Utilities.Build.UnityPlayerBuildTools.StartCommandLineBuild -logfile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\StandaloneWindows64.log`"" -PassThru
        $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\StandaloneWindows64.log

        while ( -not $process.HasExited -and $ljob.HasMoreData )
        {
            Receive-Job $ljob
            Start-Sleep -Milliseconds 500
        }

        Receive-Job $ljob
        Stop-Job $ljob
        Remove-Job $ljob

        exit $process.ExitCode
        # Start-UnityEditor -Latest -BatchMode -BuildTarget StandaloneWindows64 -ExecuteMethod XRTK.Utilities.Build.UnityPlayerBuildTools.StartCommandLineBuild -LogFile $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\StandaloneWindows64.log -Wait
      displayName: 'Build Windows x64 Unity Player'

    - powershell: |
        Write-Host "Returning License..."
        $editorInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Latest
        $editorPath = $editorInstance.Path + "\Editor\Unity.exe"
        $process = Start-Process -FilePath "$editorPath" -ArgumentList "-quit -batchmode -returnlicense -logfile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\activation.log`"" -PassThru
        $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\activation.log

        while ( -not $process.HasExited -and $ljob.HasMoreData )
        {
            Receive-Job $ljob
            Start-Sleep -Milliseconds 100
        }

        # wait a bit more to make sure we've got all our log content?
        Start-Sleep -Milliseconds 500

        Receive-Job $ljob
        Stop-Job $ljob
        Remove-Job $ljob

        exit $process.ExitCode
      displayName: 'Return Unity License'
      condition: always()

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Pipeline Artifact'
      inputs:
        artifactName: Builds
        targetPath: '$(project.name)/Builds'
      condition: always()
