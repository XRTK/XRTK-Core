variables:
  - group: Global Pipeline Settings
  - name: project.folder
    value: 'XRTK'
  - name: project.name
    value: 'XRTK-Core'
  - name: package.name
    value: 'com.xrtk.core'

name: XRTK.Core-$(Date:yyyyMMdd)$(Rev:.r)
# name: XRTK.Core$(System.PullRequest.PullRequestNumber)$(Rev:.r)

pr:
  autoCancel: true
  branches:
   include:
     - master
     - development
     - feature/*
  paths:
    include:
    - $(project.name)/*
    exclude:
      - '*'
      - $(project.name)/Packages/$(package.name)/README.md
      - $(project.name)/Packages/$(package.name)/LICENSE.md
      - $(project.name)/Packages/$(package.name)/.github/*

pool:
  name: Azure Pipelines
  vmImage: 'vs2017-win2016'
  demands:
    - unity -equals true

jobs:
  - job: Setup
    steps:
    - checkout: self
      submodules: recursive

  - job: InstallUnityEditor
    dependsOn: Setup
    continueOnError: true
    steps:
      - task: DownloadSecureFile@1
        displayName: 'Download Unity Credentials'
        inputs:
          secureFile: '47a1e34d-3344-416c-85c8-0d055ae43ddc'

      - powershell: |
          Install-Module -Name UnitySetup -AllowPrerelease -RequiredVersion $(UnityPowerShellHelperVersion) -Scope CurrentUser -Repository PSGallery -Force
          Install-UnitySetupInstance -Verbose -Installers ( Find-UnitySetupInstaller -Version $(UnityVersion) -Components  'Windows', 'Windows_IL2CPP' -Verbose )
          Get-UnitySetupInstance | Select-UnitySetupInstance | Format-Table -Wrap -AutoSize
        failOnStderr: true
        displayName: 'Install Unity Editor'

      - powershell: |
          New-Item -Path $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\activation.log -ItemType File -Force

          $unityCredentials = (Get-Content "$(Agent.TempDirectory)\xrtk-build-credentials.json" -Raw) | ConvertFrom-Json

          if ( -not $unityCredentials ) {
              Write-Error "Failed to find unity credentials"
              exit 1
          }

          $username = $unityCredentials.username
          $password = $unityCredentials.password
          $serial = $unityCredentials.serial

          $editorInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Latest
          $editorPath = $editorInstance.Path + "\Editor\Unity.exe"
          Write-Host $editorInstance.Path
          Write-Host "Activating License..."
          $process = Start-Process -FilePath "$editorPath" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -serial $serial -username `"$username`" -password `"$password`" -logfile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\activation.log`"" -PassThru
          $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\activation.log

          while ( -not $process.HasExited -and $ljob.HasMoreData )
          {
            Receive-Job $ljob
          }

          Receive-Job $ljob
          Stop-Job $ljob
          Remove-Job $ljob

          exit $process.ExitCode
        failOnStderr: true
        displayName: 'Activate Unity License'

  - job: UnitTests
    dependsOn: InstallUnityEditor
    condition: succeeded('InstallUnityEditor')
    continueOnError: true
    steps:
      - powershell: |
          Write-Host "Starting Unity Unit Tests..."
          New-Item -Path $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\tests.log -ItemType File -Force

          $editorInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Latest
          $editorPath = $editorInstance.Path + "\Editor\Unity.exe"

          $process = Start-Process -FilePath "$editorPath" -ArgumentList "-batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -logfile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\tests.log`" -editorTestsResultFile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\tests.xml`" -runEditorTests" -PassThru
          $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\tests.log

          while ( -not $process.HasExited -and $ljob.HasMoreData )
          {
            Receive-Job $ljob
          }

          Receive-Job $ljob
          Stop-Job $ljob
          Remove-Job $ljob

          exit $process.ExitCode
        failOnStderr: true
        displayName: 'Run Unity Unit Tests'

      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: 'test?.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs'
          mergeTestResults: true
          failTaskOnFailedTests: true
        condition: always()

  - job: BuildWindows
    dependsOn: UnitTests
    condition: succeeded('UnitTests')
    steps:
      - powershell: |
          Write-Host "Starting Windows x64 Build..."
          New-Item -Path $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\StandaloneWindows64.log -ItemType File -Force

          $editorInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Latest
          $editorPath = $editorInstance.Path + "\Editor\Unity.exe"

          $process = Start-Process -FilePath "$editorPath" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -buildTarget StandaloneWindows64 -executeMethod XRTK.Utilities.Build.UnityPlayerBuildTools.StartCommandLineBuild -logfile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\StandaloneWindows64.log`"" -PassThru
          $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\StandaloneWindows64.log

          while ( -not $process.HasExited -and $ljob.HasMoreData )
          {
            Receive-Job $ljob
          }

          Receive-Job $ljob
          Stop-Job $ljob
          Remove-Job $ljob

          exit $process.ExitCode
        failOnStderr: true
        displayName: 'Build Windows x64 Unity Player'

  - job: ReturnUnityLicense
    dependsOn:
      - InstallUnityEditor
      - BuildWindows
      - UnitTests
    condition: always()
    steps:
      - powershell: |
          Write-Host "Returning License..."

          $editorInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Latest
          $editorPath = $editorInstance.Path + "\Editor\Unity.exe"

          $process = Start-Process -FilePath "$editorPath" -ArgumentList "-quit -batchmode -returnlicense -logfile `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\deactivation.log`"" -PassThru
          $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs\deactivation.log

          while ( -not $process.HasExited -and $ljob.HasMoreData )
          {
            Receive-Job $ljob
          }

          Receive-Job $ljob
          Stop-Job $ljob
          Remove-Job $ljob

          exit $process.ExitCode
        failOnStderr: false
        displayName: 'Return Unity License'
        condition: always()

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Pipeline Artifact'
        inputs:
          targetPath: '$(project.name)/Builds'
          artifactName: 'PR Validation Build Artifacts'
        condition: always()
