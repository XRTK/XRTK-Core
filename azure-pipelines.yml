variables:
  - group: Global Pipeline Settings
  - name: project.folder
    value: 'XRTK'
  - name: project.name
    value: 'XRTK-Core'
  - name: package.name
    value: 'com.xrtk.core'
  - name: EditorPath
    value: ''
  - name: LogDirectory
    value: ''

name: XRTK.Core-$(Date:yyyyMMdd)$(Rev:.r)
# name: XRTK.Core$(System.PullRequest.PullRequestNumber)$(Rev:.r)

pr:
  autoCancel: true
  branches:
   include:
     - master
     - development
     - feature/*
  paths:
    include:
    - $(project.name)/*
    exclude:
      - '*'
      - $(project.name)/Packages/$(package.name)/README.md
      - $(project.name)/Packages/$(package.name)/LICENSE.md
      - $(project.name)/Packages/$(package.name)/.github/*

pool:
  name: Azure Pipelines
  vmImage: 'vs2017-win2016'
  demands:
    - unity -equals true

jobs:
  - job: pr_validation
    steps:
    - checkout: self
      submodules: recursive

    - powershell: |
        Install-Module -Name UnitySetup -AllowPrerelease -RequiredVersion $(UnityPowerShellHelperVersion) -Scope CurrentUser -Repository PSGallery -Force
        Install-UnitySetupInstance -Verbose -Installers ( Find-UnitySetupInstaller -Version $(UnityVersion) -Components  'Windows', 'Windows_IL2CPP' -Verbose )
        Get-UnitySetupInstance | Select-UnitySetupInstance | Format-Table -Wrap -AutoSize
      failOnStderr: true
      displayName: 'Install Unity Editor'

    - powershell: |
        $editorInstance = Get-UnitySetupInstance | Select-UnitySetupInstance -Latest
        $editorPath = $editorInstance.Path + "\Editor\Unity.exe"
        echo "##vso[task.setvariable variable=EditorPath]$editorPath"

        $logDirectory = `"$(System.DefaultWorkingDirectory)\$(project.name)\Builds\Logs`"
        echo "##vso[task.setvariable variable=LogDirectory]logDirectory"

        New-Item -Path $(logDirectory)\activation.log -ItemType File -Force

        Write-Host "Activating License..."
        $process = Start-Process -FilePath "$editorPath" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -serial $(UnitySerial) -username `"$(UnityUsername)`" -password `"$(UnityPassword)`" -logfile `"$(logDirectory)\activation.log`"" -PassThru
        $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(logDirectory)\activation.log

        while ( -not $process.HasExited -and $ljob.HasMoreData )
        {
          Receive-Job $ljob
        }

        Receive-Job $ljob
        Stop-Job $ljob
        Remove-Job $ljob

        exit $process.ExitCode
      failOnStderr: true
      displayName: 'Activate Unity License'

    - powershell: |
        Write-Host "$(EditorPath)"
        Write-Host "$(LogDirectory)"
        New-Item -Path $(LogDirectory)\tests.log -ItemType File -Force

        Write-Host "Starting Unity Unit Tests..."
        $process = Start-Process -FilePath "$(EditorPath)" -ArgumentList "-batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -logfile `"$(LogDirectory)\tests.log`" -editorTestsResultFile `"$(LogDirectory)\tests.xml`" -runEditorTests" -PassThru
        $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(LogDirectory)\tests.log

        while ( -not $process.HasExited -and $ljob.HasMoreData )
        {
          Receive-Job $ljob
        }

        Receive-Job $ljob
        Stop-Job $ljob
        Remove-Job $ljob

        exit $process.ExitCode
      failOnStderr: true
      displayName: 'Run Unity Unit Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: 'test?.xml'
        searchFolder: '$(LogDirectory)'
        mergeTestResults: true
        failTaskOnFailedTests: true
      condition: always()

    - powershell: |
        Write-Host "Starting Windows x64 Build..."
        New-Item -Path $(LogDirectory)\StandaloneWindows64.log -ItemType File -Force

        $process = Start-Process -FilePath "$(EditorPath)" -ArgumentList "-quit -batchmode -projectPath `"$(System.DefaultWorkingDirectory)\$(project.name)`" -buildTarget StandaloneWindows64 -executeMethod XRTK.Utilities.Build.UnityPlayerBuildTools.StartCommandLineBuild -logfile `"$(LogDirectory)\StandaloneWindows64.log`"" -PassThru
        $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(LogDirectory)\StandaloneWindows64.log

        while ( -not $process.HasExited -and $ljob.HasMoreData )
        {
          Receive-Job $ljob
        }

        Receive-Job $ljob
        Stop-Job $ljob
        Remove-Job $ljob

        exit $process.ExitCode
      failOnStderr: true
      displayName: 'Build Windows x64 Unity Player'

    - powershell: |
        Write-Host "Returning License..."

        $process = Start-Process -FilePath "$(EditorPath)" -ArgumentList "-quit -batchmode -returnlicense -logfile `"$(LogDirectory)\deactivation.log`"" -PassThru
        $ljob = Start-Job -ScriptBlock { param($log) Get-Content "$log" -Wait } -ArgumentList $(LogDirectory)\deactivation.log

        while ( -not $process.HasExited -and $ljob.HasMoreData )
        {
          Receive-Job $ljob
        }

        Receive-Job $ljob
        Stop-Job $ljob
        Remove-Job $ljob

        exit $process.ExitCode
      failOnStderr: false
      displayName: 'Return Unity License'
      condition: always()

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(project.name)/Builds'
        artifactName: 'PR Validation Build Artifacts'
      condition: always()
